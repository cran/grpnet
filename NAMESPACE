useDynLib(grpnet, .registration = TRUE)

export(coef.cv.grpnet, coef.grpnet, cv.compare,
       cv.grpnet.default, cv.grpnet.formula, cv.grpnet, 
       grpnet.default, grpnet.formula, grpnet,
       plot.cv.grpnet, plot.grpnet,
       predict.cv.grpnet, predict.grpnet,
       print.coef.grpnet, print.cv.grpnet, print.grpnet,
       rk.model.matrix, rk, row.kronecker,
       visualize.penalty, visualize.shrink)

S3method(coef, cv.grpnet)
S3method(coef, grpnet)

S3method(cv.grpnet, default)
S3method(cv.grpnet, formula)

S3method(grpnet, default)
S3method(grpnet, formula)

S3method(plot, cv.grpnet)
S3method(plot, grpnet)

S3method(predict, cv.grpnet)
S3method(predict, grpnet)

S3method(print, coef.grpnet)
S3method(print, cv.grpnet)
S3method(print, grpnet)

importFrom("grDevices", "extendrange")
importFrom("graphics", "abline", "axis", "box", "legend", "lines", "mtext",
           "points", "segments")
importFrom("stats", "approx", "as.formula", "binomial", "coef", "gaussian",
           "glm", "model.matrix", "model.response", "poisson", "predict", 
           "quantile", "sd", "terms")
importFrom("parallel", "detectCores", "makeCluster", "parSapply", "stopCluster")
importFrom("utils", "packageVersion", "setTxtProgressBar", "txtProgressBar")
